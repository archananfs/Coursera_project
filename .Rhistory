help.request(globalVariables())
help.request(globalVariables)
help("globalVariables")
help(iris)
help(iris.species)
help(devtools)
‘??devtools’
??devtools
install.packages("devtools")
sessionInfo()
install.packages("KernSmooth")
example <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), nrow = 4, ncol = 2)
View(example)
install.packages('ggplot2')
library()
library(ggplot2)
library(digest)
detach("package:digest", unload = TRUE)
detach()
detach("package:ggplot2", unload = TRUE )
detach("package:ggplot2", unload =TRUE)
detach("ggplot2", unload =TRUE)
library(datasets)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
sapply(mtcars,cyl, mean)
sapply(mtcars, disp, mean)
sapply(mtcars,cyl, mean)
foo <- function(){
a <<- 1
}
a
foo()
a
get<- function()foo
get
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
k<- makeVector(2)
k
View(get)
View(get)
View(makeVector)
View(k)
k<- makeVector(1:20)
k
View(makeVector)
View(makeVector)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
View(cachemean)
View(cachemean)
B <- matrix(c(1,2,3,4),2,2)
makeCacheMatrix <- function(x = matrix()) {
m<- NULL
set<- function(y){
x<<- y
m<<- NULL
}
get<- function()x
set_inverse<- function(inverse) m<<- inverse
get_inverse<- function() m
list(set = set, get= get, set_inverse = set_inverse,
get_inverse = get_inverse )
}
B1 <- makeCacheMatrix(B)
cacheSolve <- function(x, ...) {
m <- x$get_inverse
if(!is.null(m)) {
message("getting cached data")
return(m)}
data <- x$get()
m <- inverse(data, ...)
x$set_inverse(m)
m
## Return a matrix that is the inverse of 'x'
}
cacheSolve(B1)
cacheSolve <- function(x, ...) {
m <- x$get_inverse
if(!is.null(m)) {
message("getting cached data")
return(m)}
data <- x$get()
m <- solve(data, ...)
x$set_inverse(m)
m
}
cacheSolve(B1)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if (!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
system.time()
library(swirl)
swirl()
head(data)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
unique(flags$name)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(RMySQL)
hg19<- dbConnect(MySQL(), user = "genome", db = "hg19", host = "genome-mysql.cse.ucsc.edu")
affdata <- dbReadTable(hg19, "affyU133Plus2")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
afMis <- fetch(query);quantile(afMis$misMatches)
affymissmall <- fetch(query, n=10);dbClearResult(query);
dim(ffymissmall)
dim(affymissmall)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
source("http://bioconductor.org/biocLite.R")
install.packages("BiocManager")
source("http://bioconductor.org/biocLite.R")
BiocManager::install(rhdf5)
BiocManager::install("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
h5ls("example.h5")
con<- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlcode<- readLines(con)
htmlcode= readLines(con)
con= url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlcode= readLines(con)
close(con)
htmlcode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
X <- data.frame("var1"=sample(1:5), "var2"= sample(6:10), "var3"=sample(10:15))
X <- data.frame("var1"=sample(1:5), "var2"= sample(6:10), "var3"=sample(10:15))
X <- X[sample(1:5),];X$var2[c(1,3)] = NA
X
set.seed(13435)
X <- data.frame("var1"=sample(1:5), "var2"= sample(6:10), "var3"=sample(10:15))
X <- X[sample(1:5),];X$var2[c(1,3)] = NA
X
X <- data.frame("var1"=sample(1:5), "var2"= sample(6:10), "var3"=sample(11:15))
X <- X[sample(1:5),];X$var2[c(1,3)] = NA
X
X[(X$var1 >= 3 & X$var3>11),]
X[(X$var1 >= 3 | X$var3>11),]
X[which(X$var2 >8),]
sort(X$var1, decreasing = TRUE)
sort(X$var2, na.last = TRUE)
X[order(X$var1),]
install.packages("plyr")
library(plyr)
arrange(X,var1)
arange(X,var1)
arrangeWindows(X, var1)
library(plyr)
setwd("R_projects/R_programming_assignment/course3_project")
## 1. Download and unzip the file
if(!file.exists("DATA"))
{
dir.create("DATA")
}
if(!file.exists("DATA/UCI HAR Dataset"))
{
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",
destfile = "DATA/UCI_HAAR_DATA.zip", method="curl")
unzip("DATA/UCI_HAAR_DATA.zip", exdir = "DATA")
}
## read the data set
library(data.table)
library(dplyr)
# load feature file
features <- read.table("DATA/UCI HAR Dataset/features.txt")
colnames(features) <- c("Id", "feature")
df_features <- tbl_df(features)
# load activity labels file
df_activities <- read.table("DATA/UCI HAR Dataset/activity_labels.txt",
col.names = c("Id","Activity"))
df_activities <- tbl_df(df_activities)
df_features <- mutate(df_features,
Mean=grepl("mean\\(\\)", df_features$feature))  # regx for () = \\(\\)
df_features <- mutate(df_features,
Std=grepl("std\\(\\)", df_features$feature))
df_features <- mutate(df_features, Variables = make.names(df_features$feature, unique = TRUE))
df_features <- mutate(df_features,  Variables = gsub("^t", "Time",Variables))
df_features <- mutate(df_features,  Variables = gsub("^f", "Frequency",Variables))
df_features <- mutate(df_features, Variables = gsub("^angle", "Angle",Variables))
df_features <- mutate(df_features, Variables = gsub("Acc", ".Acceleration",Variables))
df_features <- mutate(df_features, Variables = gsub("Gyro", ".Gyro",Variables))
df_features <- mutate(df_features, Variables = gsub("Jerk", ".Jerk",Variables))
df_features <- mutate(df_features, Variables = gsub("Mag", ".Mag",Variables))
df_features <- mutate(df_features, Variables = gsub("Gravity", ".Gravity",Variables))
df_features <- mutate(df_features, Variables = gsub("BodyBody", "Body",Variables))
head(df_features)
df_features <- mutate(df_features, Variables = gsub("\\.\\.", ".",Variables))
df_features <- mutate(df_features, Variables = gsub("\\.\\.", ".",Variables))
df_features <- mutate(df_features, Variables = gsub("(^|[\\.])([[:alpha:]])", "\\1\\U\\2", Variables))
head(df_features)
df_features <- mutate(df_features, Variables = gsub("(^|[\\.])([[:alpha:]])", "\\1\\U\\2", Variables,
perl=TRue))
df_features <- mutate(df_features, Variables = gsub("(^|[\\.])([[:alpha:]])", "\\1\\U\\2", Variables,
perl=TRUE))
df_features
df_features <- gsub("U", "",df_features$Variables)
head(df_features)
df_features
setwd("R_projects/R_programming_assignment/course3_project")
## 1. Download and unzip the file
if(!file.exists("DATA"))
{
dir.create("DATA")
}
if(!file.exists("DATA/UCI HAR Dataset"))
{
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",
destfile = "DATA/UCI_HAAR_DATA.zip", method="curl")
unzip("DATA/UCI_HAAR_DATA.zip", exdir = "DATA")
}
## read the data set
library(data.table)
library(dplyr)
# load feature file
features <- read.table("DATA/UCI HAR Dataset/features.txt")
colnames(features) <- c("Id", "feature")
df_features <- tbl_df(features)
# load activity labels file
df_activities <- read.table("DATA/UCI HAR Dataset/activity_labels.txt",
col.names = c("Id","Activity"))
df_activities <- tbl_df(df_activities)
## identifying mean and std in features
## using descriptive names for the activities
df_features <- mutate(df_features,
Mean=grepl("mean\\(\\)", df_features$feature))  # regx for () = \\(\\)
df_features <- mutate(df_features,
Std=grepl("std\\(\\)", df_features$feature))
df_features <- mutate(df_features, Variables = make.names(df_features$feature, unique = TRUE))
head(df_features)
df_features[, "Variables"] <- gsub("^t", "Time.", df_features$Variables)
head(df_features)
df_features[, "Variables"] <- gsub("^f", "Frequency.", df_features$Variables)
df_features[, "Variables"] <- gsub("^angle", "Angle.", df_features$Variables)
df_features[, "Variables"] <- gsub("Acc", ".Acceleration", df_features$Variables)
df_features[, "Variables"] <- gsub("Jerk", ".Jerk", df_features$Variables)
df_features[, "Variables"] <- gsub("Gravity", ".Gravity", df_features$Variables)
df_features[, "Variables"] <- gsub("Mag", ".Magnitude", df_features$Variables)
df_features[, "Variables"] <- gsub("BodyBody", "Body",df_features$Variables)
df_features[, "Variables"] <- gsub("Gyro", ".Gyro",df_features$Variables)
df_features[, "Variables"] <- gsub("\\.\\.", ".",df_features$Variables)
df_features[, "Variables"] <- gsub("\\.\\.", ".",df_features$Variables)
head(df_features)
tail(df_features,20)
train_sub <- tbl_df(read.table("DATA/UCI HAR Dataset/train/subject_train.txt"))
train_sub
train_sub <- rename(train_sub, Sub.Id = V1)
train_sub
train_sub[56:78,]
train_sub[1156:1178,]
train_X <- tbl_df(read.table("DATA/UCI HAR Dataset/train/X_train.txt"))
colnames(train_X) <- df_features$Variables
head(train_X)
colnames(train_X)[10]
train_Y  <- tbl_df(read.table("DATA/UCI HAR Dataset/train/y_train.txt"))
train_Y <- rename(train_Y, Activity_Id = V1)
train_Y
train <- cbind(train_sub, train_Y, train_X)
head(train)
train[1:5, 1:6]
test_X <- tbl_df(read.table("DATA/UCI HAR Dataset/test/X_test.txt"))
colnames(test_X) <- df_features$Variables
test_sub <- tbl_df(read.table("DATA/UCI HAR Dataset/test/subject_test.txt"))
test_sub <- rename(test_sub, Sub.Id = V1)
test_Y  <- tbl_df(read.table("DATA/UCI HAR Dataset/test/y_test.txt"))
test_Y <- rename(test_Y, Activity_Id = V1)
## combine test files
test <- cbind(test_sub, test_Y, test_X)
test[1:5,1:5]
dim(train)
train_dim <- dim(train)
test_dim <- dim(test)
test_dim
print("Test file size ", test_dim)
cat("Test file size ", test_dim)
cat("Test file size: ", test_dim, "/nTrain file size: ", test_dim)
cat("Test file size: ", test_dim, "\nTrain file size: ", test_dim)
merged <- rbind(train, test)
dim(merged)
cat("Test file size: ",dim(test), "\nTrain file size: ", dim(train),
"\n Merged file dimension:", dim(merged))
merged <- left_join(merged, df_activities, by=c("Activity_Id"="Id"))
head(merged,2)
merged[1:5, 1:6]
?select
df_merged <- select(Sub.Id, Activity_Id,
filter(df_features, Mean==TRUE | Std == TRUE)
)
df_merged <- select("Sub.Id", "Activity_Id",
filter(df_features, Mean==TRUE | Std == TRUE)
)
df_merged <- select(merged, Sub.Id, Activity_Id,
filter(df_features, Mean==TRUE | Std == TRUE)
)
df_merged <- select(merged, Sub.Id, Activity_Id,
one_of(filter(df_features, Mean==TRUE | Std == TRUE),
select(df_features,Variables)
))
df_merged <- select(merged, Sub.Id, Activity_Id,
one_of(filter(df_features, Mean==TRUE | Std == TRUE),
select(df_features,Variables)[["Variables"]]
))
cowname <- grep("mean", colnames(merged))
cowname
cowname2 <- grepl("std", colnames(merged))
cowname2
cowname2 <- list(grep("std", colnames(merged)))
cowname2
cowname1 <- list(cowname)
cowname1
selected_col <- combine.lists(cowname1,cowname2)
selected_col <- combine(cowname1,cowname2)
cowname2 <- c(grep("std", colnames(merged)))
cowname1 <- c(grep("mean", colnames(merged)))
selected_col <- c(cowname1, cowname2)
selected_col
length(selected_col)
sample <- read.table("sample.txt")
dim(sample)
merged[c(grep("mean()", colnames(merged)))]
p<-merged[c(grep("mean()", colnames(merged)))]
colnames(p)
p1<-merged[c(grep("std()", colnames(merged)))]
colnames(p1)
col1 <- c(grep("std()", colnames(merged)))
col2 <- c(grep("mean()", colnames(merged)))
selected_col <- c(col1, col2)
selected_col
colnames(merged["selected_col"])
colnames(merged[,selected_col])
merged_selected <- select(merged, Sub.Id, Activity_Id, selected_col)
dim(merged_selected)
merged_selected[1:2,1:10]
sample[1:2, 1:10]
merged_selected2 <- select(merged, Sub.Id, Activity_Id=df_activities$Activity, selected_col)
merged["Activity"]
merged_selected2 <- select(merged, Sub.Id, Activity_Id,Activity, selected_col)
merged_selected2[1:2, 1:5]
merged_selected2[100:1010, 1:5]
merged_selected2 <- group_by(Sub.Id, Activity)
merged_selected2 <- group_by(merged_selected2,Sub.Id, Activity)
merged_selected2[1:20, 1:4]
merged_selected2[100:120, 1:4]
merged_selected2[1000:1020, 1:4]
tidy_summary <- summarise_each(merged_selected2, funs(mean))
tidy_summary
write.table(tidy_summary, "tidy_summary.txt", row.names = FALSE)
